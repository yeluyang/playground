// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `src/rpc/grpc/rpc.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct EndPoint {
    // message fields
    pub ip: ::std::string::String,
    pub port: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EndPoint {
    fn default() -> &'a EndPoint {
        <EndPoint as ::protobuf::Message>::default_instance()
    }
}

impl EndPoint {
    pub fn new() -> EndPoint {
        ::std::default::Default::default()
    }

    // string ip = 1;


    pub fn get_ip(&self) -> &str {
        &self.ip
    }
    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::string::String) {
        self.ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::string::String {
        &mut self.ip
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ip, ::std::string::String::new())
    }

    // int64 port = 2;


    pub fn get_port(&self) -> i64 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i64) {
        self.port = v;
    }
}

impl ::protobuf::Message for EndPoint {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ip)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.ip);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(2, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ip.is_empty() {
            os.write_string(1, &self.ip)?;
        }
        if self.port != 0 {
            os.write_int64(2, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EndPoint {
        EndPoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ip",
                    |m: &EndPoint| { &m.ip },
                    |m: &mut EndPoint| { &mut m.ip },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "port",
                    |m: &EndPoint| { &m.port },
                    |m: &mut EndPoint| { &mut m.port },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<EndPoint>(
                    "EndPoint",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static EndPoint {
        static mut instance: ::protobuf::lazy::Lazy<EndPoint> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(EndPoint::new)
        }
    }
}

impl ::protobuf::Clear for EndPoint {
    fn clear(&mut self) {
        self.ip.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EndPoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndPoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogSeq {
    // message fields
    pub index: i64,
    pub term: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogSeq {
    fn default() -> &'a LogSeq {
        <LogSeq as ::protobuf::Message>::default_instance()
    }
}

impl LogSeq {
    pub fn new() -> LogSeq {
        ::std::default::Default::default()
    }

    // int64 index = 1;


    pub fn get_index(&self) -> i64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i64) {
        self.index = v;
    }

    // int64 term = 2;


    pub fn get_term(&self) -> i64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: i64) {
        self.term = v;
    }
}

impl ::protobuf::Message for LogSeq {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(2, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_int64(1, self.index)?;
        }
        if self.term != 0 {
            os.write_int64(2, self.term)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogSeq {
        LogSeq::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "index",
                    |m: &LogSeq| { &m.index },
                    |m: &mut LogSeq| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "term",
                    |m: &LogSeq| { &m.term },
                    |m: &mut LogSeq| { &mut m.term },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogSeq>(
                    "LogSeq",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LogSeq {
        static mut instance: ::protobuf::lazy::Lazy<LogSeq> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(LogSeq::new)
        }
    }
}

impl ::protobuf::Clear for LogSeq {
    fn clear(&mut self) {
        self.index = 0;
        self.term = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogSeq {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogSeq {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VoteRequest {
    // message fields
    pub term: i64,
    pub end_point: ::protobuf::SingularPtrField<EndPoint>,
    pub log_seq: ::protobuf::SingularPtrField<LogSeq>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VoteRequest {
    fn default() -> &'a VoteRequest {
        <VoteRequest as ::protobuf::Message>::default_instance()
    }
}

impl VoteRequest {
    pub fn new() -> VoteRequest {
        ::std::default::Default::default()
    }

    // int64 term = 1;


    pub fn get_term(&self) -> i64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: i64) {
        self.term = v;
    }

    // .EndPoint end_point = 2;


    pub fn get_end_point(&self) -> &EndPoint {
        self.end_point.as_ref().unwrap_or_else(|| EndPoint::default_instance())
    }
    pub fn clear_end_point(&mut self) {
        self.end_point.clear();
    }

    pub fn has_end_point(&self) -> bool {
        self.end_point.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end_point(&mut self, v: EndPoint) {
        self.end_point = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end_point(&mut self) -> &mut EndPoint {
        if self.end_point.is_none() {
            self.end_point.set_default();
        }
        self.end_point.as_mut().unwrap()
    }

    // Take field
    pub fn take_end_point(&mut self) -> EndPoint {
        self.end_point.take().unwrap_or_else(|| EndPoint::new())
    }

    // .LogSeq log_seq = 3;


    pub fn get_log_seq(&self) -> &LogSeq {
        self.log_seq.as_ref().unwrap_or_else(|| LogSeq::default_instance())
    }
    pub fn clear_log_seq(&mut self) {
        self.log_seq.clear();
    }

    pub fn has_log_seq(&self) -> bool {
        self.log_seq.is_some()
    }

    // Param is passed by value, moved
    pub fn set_log_seq(&mut self, v: LogSeq) {
        self.log_seq = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log_seq(&mut self) -> &mut LogSeq {
        if self.log_seq.is_none() {
            self.log_seq.set_default();
        }
        self.log_seq.as_mut().unwrap()
    }

    // Take field
    pub fn take_log_seq(&mut self) -> LogSeq {
        self.log_seq.take().unwrap_or_else(|| LogSeq::new())
    }
}

impl ::protobuf::Message for VoteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.end_point {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.log_seq {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end_point)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.log_seq)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.end_point.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.log_seq.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_int64(1, self.term)?;
        }
        if let Some(ref v) = self.end_point.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.log_seq.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VoteRequest {
        VoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "term",
                    |m: &VoteRequest| { &m.term },
                    |m: &mut VoteRequest| { &mut m.term },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EndPoint>>(
                    "end_point",
                    |m: &VoteRequest| { &m.end_point },
                    |m: &mut VoteRequest| { &mut m.end_point },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogSeq>>(
                    "log_seq",
                    |m: &VoteRequest| { &m.log_seq },
                    |m: &mut VoteRequest| { &mut m.log_seq },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<VoteRequest>(
                    "VoteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VoteRequest {
        static mut instance: ::protobuf::lazy::Lazy<VoteRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(VoteRequest::new)
        }
    }
}

impl ::protobuf::Clear for VoteRequest {
    fn clear(&mut self) {
        self.term = 0;
        self.end_point.clear();
        self.log_seq.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VoteResponse {
    // message fields
    pub term: i64,
    pub granted: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VoteResponse {
    fn default() -> &'a VoteResponse {
        <VoteResponse as ::protobuf::Message>::default_instance()
    }
}

impl VoteResponse {
    pub fn new() -> VoteResponse {
        ::std::default::Default::default()
    }

    // int64 term = 1;


    pub fn get_term(&self) -> i64 {
        self.term
    }
    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: i64) {
        self.term = v;
    }

    // bool granted = 2;


    pub fn get_granted(&self) -> bool {
        self.granted
    }
    pub fn clear_granted(&mut self) {
        self.granted = false;
    }

    // Param is passed by value, moved
    pub fn set_granted(&mut self, v: bool) {
        self.granted = v;
    }
}

impl ::protobuf::Message for VoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.granted = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.granted != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_int64(1, self.term)?;
        }
        if self.granted != false {
            os.write_bool(2, self.granted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VoteResponse {
        VoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "term",
                    |m: &VoteResponse| { &m.term },
                    |m: &mut VoteResponse| { &mut m.term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "granted",
                    |m: &VoteResponse| { &m.granted },
                    |m: &mut VoteResponse| { &mut m.granted },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<VoteResponse>(
                    "VoteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VoteResponse {
        static mut instance: ::protobuf::lazy::Lazy<VoteResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(VoteResponse::new)
        }
    }
}

impl ::protobuf::Clear for VoteResponse {
    fn clear(&mut self) {
        self.term = 0;
        self.granted = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppendRequest {
    fn default() -> &'a AppendRequest {
        <AppendRequest as ::protobuf::Message>::default_instance()
    }
}

impl AppendRequest {
    pub fn new() -> AppendRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AppendRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendRequest {
        AppendRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppendRequest>(
                    "AppendRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AppendRequest {
        static mut instance: ::protobuf::lazy::Lazy<AppendRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(AppendRequest::new)
        }
    }
}

impl ::protobuf::Clear for AppendRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AppendResponse {
    fn default() -> &'a AppendResponse {
        <AppendResponse as ::protobuf::Message>::default_instance()
    }
}

impl AppendResponse {
    pub fn new() -> AppendResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AppendResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendResponse {
        AppendResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<AppendResponse>(
                    "AppendResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AppendResponse {
        static mut instance: ::protobuf::lazy::Lazy<AppendResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(AppendResponse::new)
        }
    }
}

impl ::protobuf::Clear for AppendResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16src/rpc/grpc/rpc.proto\".\n\x08EndPoint\x12\x0e\n\x02ip\x18\x01\
    \x20\x01(\tR\x02ip\x12\x12\n\x04port\x18\x02\x20\x01(\x03R\x04port\"2\n\
    \x06LogSeq\x12\x14\n\x05index\x18\x01\x20\x01(\x03R\x05index\x12\x12\n\
    \x04term\x18\x02\x20\x01(\x03R\x04term\"k\n\x0bVoteRequest\x12\x12\n\x04\
    term\x18\x01\x20\x01(\x03R\x04term\x12&\n\tend_point\x18\x02\x20\x01(\
    \x0b2\t.EndPointR\x08endPoint\x12\x20\n\x07log_seq\x18\x03\x20\x01(\x0b2\
    \x07.LogSeqR\x06logSeq\"<\n\x0cVoteResponse\x12\x12\n\x04term\x18\x01\
    \x20\x01(\x03R\x04term\x12\x18\n\x07granted\x18\x02\x20\x01(\x08R\x07gra\
    nted\"\x0f\n\rAppendRequest\"\x10\n\x0eAppendResponse2^\n\x08PeerGRPC\
    \x12%\n\x04Vote\x12\x0c.VoteRequest\x1a\r.VoteResponse\"\0\x12+\n\x06App\
    end\x12\x0e.AppendRequest\x1a\x0f.AppendResponse\"\0J\x9e\x07\n\x06\x12\
    \x04\0\0!\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\
    \x02\0\x05\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x10\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x03\x04\x12\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x03\x04\x02\
    \x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x03\x04\n\n\x0c\n\x05\x04\0\x02\
    \0\x01\x12\x03\x03\x0b\r\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\x10\x11\
    \n\x0b\n\x04\x04\0\x02\x01\x12\x03\x04\x04\x13\n\r\n\x05\x04\0\x02\x01\
    \x04\x12\x04\x04\x04\x03\x12\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x04\
    \x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x04\n\x0e\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\x04\x11\x12\n\n\n\x02\x04\x01\x12\x04\x07\0\n\x01\n\
    \n\n\x03\x04\x01\x01\x12\x03\x07\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\
    \x03\x08\x04\x14\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x08\x04\x07\x10\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x08\x04\t\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x08\n\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x08\x12\x13\
    \n\x0b\n\x04\x04\x01\x02\x01\x12\x03\t\x04\x13\n\r\n\x05\x04\x01\x02\x01\
    \x04\x12\x04\t\x04\x08\x14\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\t\x04\
    \t\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\t\n\x0e\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\t\x11\x12\n\n\n\x02\x04\x02\x12\x04\x0c\0\x10\x01\n\
    \n\n\x03\x04\x02\x01\x12\x03\x0c\x08\x13\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03\r\x04\x13\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\r\x04\x0c\x15\n\x0c\n\
    \x05\x04\x02\x02\0\x05\x12\x03\r\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\
    \x03\r\n\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\r\x11\x12\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03\x0e\x04\x1b\n\r\n\x05\x04\x02\x02\x01\x04\x12\
    \x04\x0e\x04\r\x13\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x0e\x04\x0c\n\
    \x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x0e\r\x16\n\x0c\n\x05\x04\x02\x02\
    \x01\x03\x12\x03\x0e\x19\x1a\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x0f\x04\
    \x17\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x0f\x04\x0e\x1b\n\x0c\n\x05\
    \x04\x02\x02\x02\x06\x12\x03\x0f\x04\n\n\x0c\n\x05\x04\x02\x02\x02\x01\
    \x12\x03\x0f\x0b\x12\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x0f\x15\x16\
    \n\n\n\x02\x04\x03\x12\x04\x12\0\x15\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    \x12\x08\x14\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x13\x04\x13\n\r\n\x05\x04\
    \x03\x02\0\x04\x12\x04\x13\x04\x12\x16\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x03\x13\x04\t\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x13\n\x0e\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03\x13\x11\x12\n\x0b\n\x04\x04\x03\x02\x01\
    \x12\x03\x14\x04\x15\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x14\x04\x13\
    \x13\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x14\x04\x08\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03\x14\t\x10\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03\x14\x13\x14\n\n\n\x02\x04\x04\x12\x04\x17\0\x18\x01\n\n\n\x03\x04\
    \x04\x01\x12\x03\x17\x08\x15\n\n\n\x02\x04\x05\x12\x04\x1a\0\x1b\x01\n\n\
    \n\x03\x04\x05\x01\x12\x03\x1a\x08\x16\n\n\n\x02\x06\0\x12\x04\x1d\0!\
    \x01\n\n\n\x03\x06\0\x01\x12\x03\x1d\x08\x10\n\x0b\n\x04\x06\0\x02\0\x12\
    \x03\x1e\x043\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x1e\x08\x0c\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x1e\r\x18\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x1e#/\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x20\x049\n\x0c\n\x05\x06\0\
    \x02\x01\x01\x12\x03\x20\x08\x0e\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\
    \x20\x0f\x1c\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x20'5b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
