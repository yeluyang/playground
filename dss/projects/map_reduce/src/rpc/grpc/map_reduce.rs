// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `assets/pb/map_reduce.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct FileLocation {
    // message fields
    pub host: ::std::string::String,
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FileLocation {
    fn default() -> &'a FileLocation {
        <FileLocation as ::protobuf::Message>::default_instance()
    }
}

impl FileLocation {
    pub fn new() -> FileLocation {
        ::std::default::Default::default()
    }

    // string host = 1;


    pub fn get_host(&self) -> &str {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    // string path = 2;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FileLocation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.host.is_empty() {
            os.write_string(1, &self.host)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileLocation {
        FileLocation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "host",
                    |m: &FileLocation| { &m.host },
                    |m: &mut FileLocation| { &mut m.host },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &FileLocation| { &m.path },
                    |m: &mut FileLocation| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<FileLocation>(
                    "FileLocation",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FileLocation {
        static mut instance: ::protobuf::lazy::Lazy<FileLocation> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(FileLocation::new)
        }
    }
}

impl ::protobuf::Clear for FileLocation {
    fn clear(&mut self) {
        self.host.clear();
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FileLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileLocation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MapJob {
    // message fields
    pub file: ::protobuf::SingularPtrField<FileLocation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MapJob {
    fn default() -> &'a MapJob {
        <MapJob as ::protobuf::Message>::default_instance()
    }
}

impl MapJob {
    pub fn new() -> MapJob {
        ::std::default::Default::default()
    }

    // .FileLocation file = 1;


    pub fn get_file(&self) -> &FileLocation {
        self.file.as_ref().unwrap_or_else(|| FileLocation::default_instance())
    }
    pub fn clear_file(&mut self) {
        self.file.clear();
    }

    pub fn has_file(&self) -> bool {
        self.file.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file(&mut self, v: FileLocation) {
        self.file = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file(&mut self) -> &mut FileLocation {
        if self.file.is_none() {
            self.file.set_default();
        }
        self.file.as_mut().unwrap()
    }

    // Take field
    pub fn take_file(&mut self) -> FileLocation {
        self.file.take().unwrap_or_else(|| FileLocation::new())
    }
}

impl ::protobuf::Message for MapJob {
    fn is_initialized(&self) -> bool {
        for v in &self.file {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.file)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.file.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.file.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MapJob {
        MapJob::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FileLocation>>(
                    "file",
                    |m: &MapJob| { &m.file },
                    |m: &mut MapJob| { &mut m.file },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<MapJob>(
                    "MapJob",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MapJob {
        static mut instance: ::protobuf::lazy::Lazy<MapJob> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(MapJob::new)
        }
    }
}

impl ::protobuf::Clear for MapJob {
    fn clear(&mut self) {
        self.file.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MapJob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MapJob {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReduceJob {
    // message fields
    pub key: ::std::string::String,
    pub files: ::protobuf::RepeatedField<FileLocation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReduceJob {
    fn default() -> &'a ReduceJob {
        <ReduceJob as ::protobuf::Message>::default_instance()
    }
}

impl ReduceJob {
    pub fn new() -> ReduceJob {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // repeated .FileLocation files = 2;


    pub fn get_files(&self) -> &[FileLocation] {
        &self.files
    }
    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<FileLocation>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<FileLocation> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<FileLocation> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReduceJob {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        for v in &self.files {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReduceJob {
        ReduceJob::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &ReduceJob| { &m.key },
                    |m: &mut ReduceJob| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FileLocation>>(
                    "files",
                    |m: &ReduceJob| { &m.files },
                    |m: &mut ReduceJob| { &mut m.files },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReduceJob>(
                    "ReduceJob",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReduceJob {
        static mut instance: ::protobuf::lazy::Lazy<ReduceJob> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReduceJob::new)
        }
    }
}

impl ::protobuf::Clear for ReduceJob {
    fn clear(&mut self) {
        self.key.clear();
        self.files.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReduceJob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReduceJob {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JobGetRequest {
    // message fields
    pub host: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JobGetRequest {
    fn default() -> &'a JobGetRequest {
        <JobGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl JobGetRequest {
    pub fn new() -> JobGetRequest {
        ::std::default::Default::default()
    }

    // string host = 1;


    pub fn get_host(&self) -> &str {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }
}

impl ::protobuf::Message for JobGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.host.is_empty() {
            os.write_string(1, &self.host)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JobGetRequest {
        JobGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "host",
                    |m: &JobGetRequest| { &m.host },
                    |m: &mut JobGetRequest| { &mut m.host },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<JobGetRequest>(
                    "JobGetRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JobGetRequest {
        static mut instance: ::protobuf::lazy::Lazy<JobGetRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(JobGetRequest::new)
        }
    }
}

impl ::protobuf::Clear for JobGetRequest {
    fn clear(&mut self) {
        self.host.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JobGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JobGetResponse {
    // message oneof groups
    pub job: ::std::option::Option<JobGetResponse_oneof_job>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JobGetResponse {
    fn default() -> &'a JobGetResponse {
        <JobGetResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum JobGetResponse_oneof_job {
    map_job(MapJob),
    reduce_job(ReduceJob),
}

impl JobGetResponse {
    pub fn new() -> JobGetResponse {
        ::std::default::Default::default()
    }

    // .MapJob map_job = 1;


    pub fn get_map_job(&self) -> &MapJob {
        match self.job {
            ::std::option::Option::Some(JobGetResponse_oneof_job::map_job(ref v)) => v,
            _ => MapJob::default_instance(),
        }
    }
    pub fn clear_map_job(&mut self) {
        self.job = ::std::option::Option::None;
    }

    pub fn has_map_job(&self) -> bool {
        match self.job {
            ::std::option::Option::Some(JobGetResponse_oneof_job::map_job(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_map_job(&mut self, v: MapJob) {
        self.job = ::std::option::Option::Some(JobGetResponse_oneof_job::map_job(v))
    }

    // Mutable pointer to the field.
    pub fn mut_map_job(&mut self) -> &mut MapJob {
        if let ::std::option::Option::Some(JobGetResponse_oneof_job::map_job(_)) = self.job {
        } else {
            self.job = ::std::option::Option::Some(JobGetResponse_oneof_job::map_job(MapJob::new()));
        }
        match self.job {
            ::std::option::Option::Some(JobGetResponse_oneof_job::map_job(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_map_job(&mut self) -> MapJob {
        if self.has_map_job() {
            match self.job.take() {
                ::std::option::Option::Some(JobGetResponse_oneof_job::map_job(v)) => v,
                _ => panic!(),
            }
        } else {
            MapJob::new()
        }
    }

    // .ReduceJob reduce_job = 2;


    pub fn get_reduce_job(&self) -> &ReduceJob {
        match self.job {
            ::std::option::Option::Some(JobGetResponse_oneof_job::reduce_job(ref v)) => v,
            _ => ReduceJob::default_instance(),
        }
    }
    pub fn clear_reduce_job(&mut self) {
        self.job = ::std::option::Option::None;
    }

    pub fn has_reduce_job(&self) -> bool {
        match self.job {
            ::std::option::Option::Some(JobGetResponse_oneof_job::reduce_job(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reduce_job(&mut self, v: ReduceJob) {
        self.job = ::std::option::Option::Some(JobGetResponse_oneof_job::reduce_job(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reduce_job(&mut self) -> &mut ReduceJob {
        if let ::std::option::Option::Some(JobGetResponse_oneof_job::reduce_job(_)) = self.job {
        } else {
            self.job = ::std::option::Option::Some(JobGetResponse_oneof_job::reduce_job(ReduceJob::new()));
        }
        match self.job {
            ::std::option::Option::Some(JobGetResponse_oneof_job::reduce_job(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reduce_job(&mut self) -> ReduceJob {
        if self.has_reduce_job() {
            match self.job.take() {
                ::std::option::Option::Some(JobGetResponse_oneof_job::reduce_job(v)) => v,
                _ => panic!(),
            }
        } else {
            ReduceJob::new()
        }
    }
}

impl ::protobuf::Message for JobGetResponse {
    fn is_initialized(&self) -> bool {
        if let Some(JobGetResponse_oneof_job::map_job(ref v)) = self.job {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(JobGetResponse_oneof_job::reduce_job(ref v)) = self.job {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.job = ::std::option::Option::Some(JobGetResponse_oneof_job::map_job(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.job = ::std::option::Option::Some(JobGetResponse_oneof_job::reduce_job(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.job {
            match v {
                &JobGetResponse_oneof_job::map_job(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &JobGetResponse_oneof_job::reduce_job(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.job {
            match v {
                &JobGetResponse_oneof_job::map_job(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &JobGetResponse_oneof_job::reduce_job(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JobGetResponse {
        JobGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MapJob>(
                    "map_job",
                    JobGetResponse::has_map_job,
                    JobGetResponse::get_map_job,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReduceJob>(
                    "reduce_job",
                    JobGetResponse::has_reduce_job,
                    JobGetResponse::get_reduce_job,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<JobGetResponse>(
                    "JobGetResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JobGetResponse {
        static mut instance: ::protobuf::lazy::Lazy<JobGetResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(JobGetResponse::new)
        }
    }
}

impl ::protobuf::Clear for JobGetResponse {
    fn clear(&mut self) {
        self.job = ::std::option::Option::None;
        self.job = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JobGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MapResult {
    // message fields
    pub key_results: ::std::collections::HashMap<::std::string::String, FileLocation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MapResult {
    fn default() -> &'a MapResult {
        <MapResult as ::protobuf::Message>::default_instance()
    }
}

impl MapResult {
    pub fn new() -> MapResult {
        ::std::default::Default::default()
    }

    // repeated .MapResult.KeyResultsEntry key_results = 1;


    pub fn get_key_results(&self) -> &::std::collections::HashMap<::std::string::String, FileLocation> {
        &self.key_results
    }
    pub fn clear_key_results(&mut self) {
        self.key_results.clear();
    }

    // Param is passed by value, moved
    pub fn set_key_results(&mut self, v: ::std::collections::HashMap<::std::string::String, FileLocation>) {
        self.key_results = v;
    }

    // Mutable pointer to the field.
    pub fn mut_key_results(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, FileLocation> {
        &mut self.key_results
    }

    // Take field
    pub fn take_key_results(&mut self) -> ::std::collections::HashMap<::std::string::String, FileLocation> {
        ::std::mem::replace(&mut self.key_results, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for MapResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<FileLocation>>(wire_type, is, &mut self.key_results)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<FileLocation>>(1, &self.key_results);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<FileLocation>>(1, &self.key_results, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MapResult {
        MapResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<FileLocation>>(
                    "key_results",
                    |m: &MapResult| { &m.key_results },
                    |m: &mut MapResult| { &mut m.key_results },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<MapResult>(
                    "MapResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MapResult {
        static mut instance: ::protobuf::lazy::Lazy<MapResult> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(MapResult::new)
        }
    }
}

impl ::protobuf::Clear for MapResult {
    fn clear(&mut self) {
        self.key_results.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MapResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MapResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReduceResult {
    // message fields
    pub key: ::std::string::String,
    pub result: ::protobuf::SingularPtrField<FileLocation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReduceResult {
    fn default() -> &'a ReduceResult {
        <ReduceResult as ::protobuf::Message>::default_instance()
    }
}

impl ReduceResult {
    pub fn new() -> ReduceResult {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // .FileLocation result = 2;


    pub fn get_result(&self) -> &FileLocation {
        self.result.as_ref().unwrap_or_else(|| FileLocation::default_instance())
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: FileLocation) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut FileLocation {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> FileLocation {
        self.result.take().unwrap_or_else(|| FileLocation::new())
    }
}

impl ::protobuf::Message for ReduceResult {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReduceResult {
        ReduceResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "key",
                    |m: &ReduceResult| { &m.key },
                    |m: &mut ReduceResult| { &mut m.key },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FileLocation>>(
                    "result",
                    |m: &ReduceResult| { &m.result },
                    |m: &mut ReduceResult| { &mut m.result },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReduceResult>(
                    "ReduceResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReduceResult {
        static mut instance: ::protobuf::lazy::Lazy<ReduceResult> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ReduceResult::new)
        }
    }
}

impl ::protobuf::Clear for ReduceResult {
    fn clear(&mut self) {
        self.key.clear();
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReduceResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReduceResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JobDoneRequest {
    // message oneof groups
    pub result: ::std::option::Option<JobDoneRequest_oneof_result>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JobDoneRequest {
    fn default() -> &'a JobDoneRequest {
        <JobDoneRequest as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum JobDoneRequest_oneof_result {
    map_result(MapResult),
    reduce_result(ReduceResult),
}

impl JobDoneRequest {
    pub fn new() -> JobDoneRequest {
        ::std::default::Default::default()
    }

    // .MapResult map_result = 1;


    pub fn get_map_result(&self) -> &MapResult {
        match self.result {
            ::std::option::Option::Some(JobDoneRequest_oneof_result::map_result(ref v)) => v,
            _ => MapResult::default_instance(),
        }
    }
    pub fn clear_map_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_map_result(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(JobDoneRequest_oneof_result::map_result(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_map_result(&mut self, v: MapResult) {
        self.result = ::std::option::Option::Some(JobDoneRequest_oneof_result::map_result(v))
    }

    // Mutable pointer to the field.
    pub fn mut_map_result(&mut self) -> &mut MapResult {
        if let ::std::option::Option::Some(JobDoneRequest_oneof_result::map_result(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(JobDoneRequest_oneof_result::map_result(MapResult::new()));
        }
        match self.result {
            ::std::option::Option::Some(JobDoneRequest_oneof_result::map_result(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_map_result(&mut self) -> MapResult {
        if self.has_map_result() {
            match self.result.take() {
                ::std::option::Option::Some(JobDoneRequest_oneof_result::map_result(v)) => v,
                _ => panic!(),
            }
        } else {
            MapResult::new()
        }
    }

    // .ReduceResult reduce_result = 2;


    pub fn get_reduce_result(&self) -> &ReduceResult {
        match self.result {
            ::std::option::Option::Some(JobDoneRequest_oneof_result::reduce_result(ref v)) => v,
            _ => ReduceResult::default_instance(),
        }
    }
    pub fn clear_reduce_result(&mut self) {
        self.result = ::std::option::Option::None;
    }

    pub fn has_reduce_result(&self) -> bool {
        match self.result {
            ::std::option::Option::Some(JobDoneRequest_oneof_result::reduce_result(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reduce_result(&mut self, v: ReduceResult) {
        self.result = ::std::option::Option::Some(JobDoneRequest_oneof_result::reduce_result(v))
    }

    // Mutable pointer to the field.
    pub fn mut_reduce_result(&mut self) -> &mut ReduceResult {
        if let ::std::option::Option::Some(JobDoneRequest_oneof_result::reduce_result(_)) = self.result {
        } else {
            self.result = ::std::option::Option::Some(JobDoneRequest_oneof_result::reduce_result(ReduceResult::new()));
        }
        match self.result {
            ::std::option::Option::Some(JobDoneRequest_oneof_result::reduce_result(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_reduce_result(&mut self) -> ReduceResult {
        if self.has_reduce_result() {
            match self.result.take() {
                ::std::option::Option::Some(JobDoneRequest_oneof_result::reduce_result(v)) => v,
                _ => panic!(),
            }
        } else {
            ReduceResult::new()
        }
    }
}

impl ::protobuf::Message for JobDoneRequest {
    fn is_initialized(&self) -> bool {
        if let Some(JobDoneRequest_oneof_result::map_result(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(JobDoneRequest_oneof_result::reduce_result(ref v)) = self.result {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(JobDoneRequest_oneof_result::map_result(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.result = ::std::option::Option::Some(JobDoneRequest_oneof_result::reduce_result(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &JobDoneRequest_oneof_result::map_result(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &JobDoneRequest_oneof_result::reduce_result(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.result {
            match v {
                &JobDoneRequest_oneof_result::map_result(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &JobDoneRequest_oneof_result::reduce_result(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JobDoneRequest {
        JobDoneRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MapResult>(
                    "map_result",
                    JobDoneRequest::has_map_result,
                    JobDoneRequest::get_map_result,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ReduceResult>(
                    "reduce_result",
                    JobDoneRequest::has_reduce_result,
                    JobDoneRequest::get_reduce_result,
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<JobDoneRequest>(
                    "JobDoneRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JobDoneRequest {
        static mut instance: ::protobuf::lazy::Lazy<JobDoneRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(JobDoneRequest::new)
        }
    }
}

impl ::protobuf::Clear for JobDoneRequest {
    fn clear(&mut self) {
        self.result = ::std::option::Option::None;
        self.result = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JobDoneRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobDoneRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct JobDoneResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a JobDoneResponse {
    fn default() -> &'a JobDoneResponse {
        <JobDoneResponse as ::protobuf::Message>::default_instance()
    }
}

impl JobDoneResponse {
    pub fn new() -> JobDoneResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for JobDoneResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> JobDoneResponse {
        JobDoneResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<JobDoneResponse>(
                    "JobDoneResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static JobDoneResponse {
        static mut instance: ::protobuf::lazy::Lazy<JobDoneResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(JobDoneResponse::new)
        }
    }
}

impl ::protobuf::Clear for JobDoneResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for JobDoneResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for JobDoneResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aassets/pb/map_reduce.proto\"6\n\x0cFileLocation\x12\x12\n\x04host\
    \x18\x01\x20\x01(\tR\x04host\x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04pa\
    th\"+\n\x06MapJob\x12!\n\x04file\x18\x01\x20\x01(\x0b2\r.FileLocationR\
    \x04file\"B\n\tReduceJob\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\
    #\n\x05files\x18\x02\x20\x03(\x0b2\r.FileLocationR\x05files\"#\n\rJobGet\
    Request\x12\x12\n\x04host\x18\x01\x20\x01(\tR\x04host\"h\n\x0eJobGetResp\
    onse\x12\"\n\x07map_job\x18\x01\x20\x01(\x0b2\x07.MapJobH\0R\x06mapJob\
    \x12+\n\nreduce_job\x18\x02\x20\x01(\x0b2\n.ReduceJobH\0R\treduceJobB\
    \x05\n\x03job\"\x96\x01\n\tMapResult\x12;\n\x0bkey_results\x18\x01\x20\
    \x03(\x0b2\x1a.MapResult.KeyResultsEntryR\nkeyResults\x1aL\n\x0fKeyResul\
    tsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12#\n\x05value\x18\
    \x02\x20\x01(\x0b2\r.FileLocationR\x05value:\x028\x01\"G\n\x0cReduceResu\
    lt\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12%\n\x06result\x18\x02\
    \x20\x01(\x0b2\r.FileLocationR\x06result\"}\n\x0eJobDoneRequest\x12+\n\n\
    map_result\x18\x01\x20\x01(\x0b2\n.MapResultH\0R\tmapResult\x124\n\rredu\
    ce_result\x18\x02\x20\x01(\x0b2\r.ReduceResultH\0R\x0creduceResultB\x08\
    \n\x06result\"\x11\n\x0fJobDoneResponse2i\n\nMasterGRPC\x12+\n\x06JobGet\
    \x12\x0e.JobGetRequest\x1a\x0f.JobGetResponse\"\0\x12.\n\x07JobDone\x12\
    \x0f.JobDoneRequest\x1a\x10.JobDoneResponse\"\0J\x80\t\n\x06\x12\x04\0\0\
    0\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x05\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\x14\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x03\x04\x14\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x03\x04\n\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\x03\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\x03\x12\x13\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x04\x04\x14\n\x0c\n\
    \x05\x04\0\x02\x01\x05\x12\x03\x04\x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\
    \x12\x03\x04\x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x04\x12\x13\n\
    \n\n\x02\x04\x01\x12\x04\x07\0\t\x01\n\n\n\x03\x04\x01\x01\x12\x03\x07\
    \x08\x0e\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x08\x04\x1a\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03\x08\x04\x10\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x08\x11\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x08\x18\x19\n\n\n\x02\
    \x04\x02\x12\x04\x0b\0\x0e\x01\n\n\n\x03\x04\x02\x01\x12\x03\x0b\x08\x11\
    \n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0c\x04\x13\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03\x0c\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0c\x0b\x0e\
    \n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0c\x11\x12\n\x0b\n\x04\x04\x02\
    \x02\x01\x12\x03\r\x04$\n\x0c\n\x05\x04\x02\x02\x01\x04\x12\x03\r\x04\
    \x0c\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\r\r\x19\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03\r\x1a\x1f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\r\
    \"#\n\n\n\x02\x04\x03\x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03\x10\x08\x15\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x11\x04\x14\n\x0c\n\
    \x05\x04\x03\x02\0\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x11\x0b\x0f\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x11\x12\x13\n\
    \n\n\x02\x04\x04\x12\x04\x14\0\x19\x01\n\n\n\x03\x04\x04\x01\x12\x03\x14\
    \x08\x16\n\x0c\n\x04\x04\x04\x08\0\x12\x04\x15\x04\x18\x05\n\x0c\n\x05\
    \x04\x04\x08\0\x01\x12\x03\x15\n\r\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x16\
    \x08\x1b\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x16\x08\x0e\n\x0c\n\x05\
    \x04\x04\x02\0\x01\x12\x03\x16\x0f\x16\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03\x16\x19\x1a\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x17\x08!\n\x0c\n\
    \x05\x04\x04\x02\x01\x06\x12\x03\x17\x08\x11\n\x0c\n\x05\x04\x04\x02\x01\
    \x01\x12\x03\x17\x12\x1c\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x17\x1f\
    \x20\n\n\n\x02\x04\x05\x12\x04\x1b\0\x1d\x01\n\n\n\x03\x04\x05\x01\x12\
    \x03\x1b\x08\x11\n\x0b\n\x04\x04\x05\x02\0\x12\x03\x1c\x04.\n\x0c\n\x05\
    \x04\x05\x02\0\x06\x12\x03\x1c\x04\x1d\n\x0c\n\x05\x04\x05\x02\0\x01\x12\
    \x03\x1c\x1e)\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03\x1c,-\n\n\n\x02\x04\
    \x06\x12\x04\x1f\0\"\x01\n\n\n\x03\x04\x06\x01\x12\x03\x1f\x08\x14\n\x0b\
    \n\x04\x04\x06\x02\0\x12\x03\x20\x04\x13\n\x0c\n\x05\x04\x06\x02\0\x05\
    \x12\x03\x20\x04\n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03\x20\x0b\x0e\n\
    \x0c\n\x05\x04\x06\x02\0\x03\x12\x03\x20\x11\x12\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03!\x04\x1c\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03!\x04\x10\n\
    \x0c\n\x05\x04\x06\x02\x01\x01\x12\x03!\x11\x17\n\x0c\n\x05\x04\x06\x02\
    \x01\x03\x12\x03!\x1a\x1b\n\n\n\x02\x04\x07\x12\x04$\0)\x01\n\n\n\x03\
    \x04\x07\x01\x12\x03$\x08\x16\n\x0c\n\x04\x04\x07\x08\0\x12\x04%\x04(\
    \x05\n\x0c\n\x05\x04\x07\x08\0\x01\x12\x03%\n\x10\n\x0b\n\x04\x04\x07\
    \x02\0\x12\x03&\x08!\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03&\x08\x11\n\
    \x0c\n\x05\x04\x07\x02\0\x01\x12\x03&\x12\x1c\n\x0c\n\x05\x04\x07\x02\0\
    \x03\x12\x03&\x1f\x20\n\x0b\n\x04\x04\x07\x02\x01\x12\x03'\x08'\n\x0c\n\
    \x05\x04\x07\x02\x01\x06\x12\x03'\x08\x14\n\x0c\n\x05\x04\x07\x02\x01\
    \x01\x12\x03'\x15\"\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03'%&\n\t\n\x02\
    \x04\x08\x12\x03+\0\x1a\n\n\n\x03\x04\x08\x01\x12\x03+\x08\x17\n\n\n\x02\
    \x06\0\x12\x04-\00\x01\n\n\n\x03\x06\0\x01\x12\x03-\x08\x12\n\x0b\n\x04\
    \x06\0\x02\0\x12\x03.\x049\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03.\x08\x0e\
    \n\x0c\n\x05\x06\0\x02\0\x02\x12\x03.\x0f\x1c\n\x0c\n\x05\x06\0\x02\0\
    \x03\x12\x03.'5\n\x0b\n\x04\x06\0\x02\x01\x12\x03/\x04<\n\x0c\n\x05\x06\
    \0\x02\x01\x01\x12\x03/\x08\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03/\
    \x10\x1e\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03/)8b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
