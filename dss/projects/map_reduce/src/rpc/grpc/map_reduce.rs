// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `assets/pb/map_reduce.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
pub struct FileLocation {
    // message fields
    pub host: ::std::string::String,
    pub path: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FileLocation {
    fn default() -> &'a FileLocation {
        <FileLocation as ::protobuf::Message>::default_instance()
    }
}

impl FileLocation {
    pub fn new() -> FileLocation {
        ::std::default::Default::default()
    }

    // string host = 1;


    pub fn get_host(&self) -> &str {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    // string path = 2;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FileLocation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.host.is_empty() {
            os.write_string(1, &self.host)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileLocation {
        FileLocation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "host",
                    |m: &FileLocation| { &m.host },
                    |m: &mut FileLocation| { &mut m.host },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &FileLocation| { &m.path },
                    |m: &mut FileLocation| { &mut m.path },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<FileLocation>(
                    "FileLocation",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FileLocation {
        static mut instance: ::protobuf::lazy::Lazy<FileLocation> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(FileLocation::new)
        }
    }
}

impl ::protobuf::Clear for FileLocation {
    fn clear(&mut self) {
        self.host.clear();
        self.path.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FileLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileLocation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaskGetRequest {
    // message fields
    pub task_type: TaskType,
    pub host: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaskGetRequest {
    fn default() -> &'a TaskGetRequest {
        <TaskGetRequest as ::protobuf::Message>::default_instance()
    }
}

impl TaskGetRequest {
    pub fn new() -> TaskGetRequest {
        ::std::default::Default::default()
    }

    // .TaskType task_type = 1;


    pub fn get_task_type(&self) -> TaskType {
        self.task_type
    }
    pub fn clear_task_type(&mut self) {
        self.task_type = TaskType::ANY;
    }

    // Param is passed by value, moved
    pub fn set_task_type(&mut self, v: TaskType) {
        self.task_type = v;
    }

    // string host = 2;


    pub fn get_host(&self) -> &str {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TaskGetRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.task_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_type != TaskType::ANY {
            my_size += ::protobuf::rt::enum_size(1, self.task_type);
        }
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.host);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.task_type != TaskType::ANY {
            os.write_enum(1, self.task_type.value())?;
        }
        if !self.host.is_empty() {
            os.write_string(2, &self.host)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaskGetRequest {
        TaskGetRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TaskType>>(
                    "task_type",
                    |m: &TaskGetRequest| { &m.task_type },
                    |m: &mut TaskGetRequest| { &mut m.task_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "host",
                    |m: &TaskGetRequest| { &m.host },
                    |m: &mut TaskGetRequest| { &mut m.host },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TaskGetRequest>(
                    "TaskGetRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaskGetRequest {
        static mut instance: ::protobuf::lazy::Lazy<TaskGetRequest> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TaskGetRequest::new)
        }
    }
}

impl ::protobuf::Clear for TaskGetRequest {
    fn clear(&mut self) {
        self.task_type = TaskType::ANY;
        self.host.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaskGetRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskGetRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaskGetResponse {
    // message fields
    pub task_type: TaskType,
    pub file_location: ::protobuf::SingularPtrField<FileLocation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaskGetResponse {
    fn default() -> &'a TaskGetResponse {
        <TaskGetResponse as ::protobuf::Message>::default_instance()
    }
}

impl TaskGetResponse {
    pub fn new() -> TaskGetResponse {
        ::std::default::Default::default()
    }

    // .TaskType task_type = 1;


    pub fn get_task_type(&self) -> TaskType {
        self.task_type
    }
    pub fn clear_task_type(&mut self) {
        self.task_type = TaskType::ANY;
    }

    // Param is passed by value, moved
    pub fn set_task_type(&mut self, v: TaskType) {
        self.task_type = v;
    }

    // .FileLocation file_location = 2;


    pub fn get_file_location(&self) -> &FileLocation {
        self.file_location.as_ref().unwrap_or_else(|| FileLocation::default_instance())
    }
    pub fn clear_file_location(&mut self) {
        self.file_location.clear();
    }

    pub fn has_file_location(&self) -> bool {
        self.file_location.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_location(&mut self, v: FileLocation) {
        self.file_location = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_location(&mut self) -> &mut FileLocation {
        if self.file_location.is_none() {
            self.file_location.set_default();
        }
        self.file_location.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_location(&mut self) -> FileLocation {
        self.file_location.take().unwrap_or_else(|| FileLocation::new())
    }
}

impl ::protobuf::Message for TaskGetResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.file_location {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.task_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.file_location)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_type != TaskType::ANY {
            my_size += ::protobuf::rt::enum_size(1, self.task_type);
        }
        if let Some(ref v) = self.file_location.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.task_type != TaskType::ANY {
            os.write_enum(1, self.task_type.value())?;
        }
        if let Some(ref v) = self.file_location.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaskGetResponse {
        TaskGetResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TaskType>>(
                    "task_type",
                    |m: &TaskGetResponse| { &m.task_type },
                    |m: &mut TaskGetResponse| { &mut m.task_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FileLocation>>(
                    "file_location",
                    |m: &TaskGetResponse| { &m.file_location },
                    |m: &mut TaskGetResponse| { &mut m.file_location },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<TaskGetResponse>(
                    "TaskGetResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaskGetResponse {
        static mut instance: ::protobuf::lazy::Lazy<TaskGetResponse> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(TaskGetResponse::new)
        }
    }
}

impl ::protobuf::Clear for TaskGetResponse {
    fn clear(&mut self) {
        self.task_type = TaskType::ANY;
        self.file_location.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaskGetResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskGetResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TaskType {
    ANY = 0,
    MAP = 1,
    REDUCE = 2,
}

impl ::protobuf::ProtobufEnum for TaskType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TaskType> {
        match value {
            0 => ::std::option::Option::Some(TaskType::ANY),
            1 => ::std::option::Option::Some(TaskType::MAP),
            2 => ::std::option::Option::Some(TaskType::REDUCE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TaskType] = &[
            TaskType::ANY,
            TaskType::MAP,
            TaskType::REDUCE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<TaskType>("TaskType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TaskType {
}

impl ::std::default::Default for TaskType {
    fn default() -> Self {
        TaskType::ANY
    }
}

impl ::protobuf::reflect::ProtobufValue for TaskType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aassets/pb/map_reduce.proto\"6\n\x0cFileLocation\x12\x12\n\x04host\
    \x18\x01\x20\x01(\tR\x04host\x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04pa\
    th\"L\n\x0eTaskGetRequest\x12&\n\ttask_type\x18\x01\x20\x01(\x0e2\t.Task\
    TypeR\x08taskType\x12\x12\n\x04host\x18\x02\x20\x01(\tR\x04host\"m\n\x0f\
    TaskGetResponse\x12&\n\ttask_type\x18\x01\x20\x01(\x0e2\t.TaskTypeR\x08t\
    askType\x122\n\rfile_location\x18\x02\x20\x01(\x0b2\r.FileLocationR\x0cf\
    ileLocation*(\n\x08TaskType\x12\x07\n\x03ANY\x10\0\x12\x07\n\x03MAP\x10\
    \x01\x12\n\n\x06REDUCE\x10\x022<\n\nMasterGRPC\x12.\n\x07TaskGet\x12\x0f\
    .TaskGetRequest\x1a\x10.TaskGetResponse\"\0J\xe0\x05\n\x06\x12\x04\0\0\
    \x19\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x05\0\x12\x04\x02\0\
    \x06\x01\n\n\n\x03\x05\0\x01\x12\x03\x02\x05\r\n\x0b\n\x04\x05\0\x02\0\
    \x12\x03\x03\x04\x0c\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x03\x04\x07\n\
    \x0c\n\x05\x05\0\x02\0\x02\x12\x03\x03\n\x0b\n\x0b\n\x04\x05\0\x02\x01\
    \x12\x03\x04\x04\x0c\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x04\x04\x07\n\
    \x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x04\n\x0b\n\x0b\n\x04\x05\0\x02\x02\
    \x12\x03\x05\x04\x0f\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x05\x04\n\n\
    \x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x05\r\x0e\n\n\n\x02\x04\0\x12\x04\
    \x08\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x14\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\t\x04\x14\n\r\n\x05\x04\0\x02\0\x04\x12\x04\t\x04\x08\x16\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\t\x0b\x0f\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x12\x13\n\x0b\n\
    \x04\x04\0\x02\x01\x12\x03\n\x04\x14\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\
    \n\x04\t\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\x04\n\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\n\x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\
    \x03\n\x12\x13\n\n\n\x02\x04\x01\x12\x04\r\0\x10\x01\n\n\n\x03\x04\x01\
    \x01\x12\x03\r\x08\x16\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0e\x04\x1b\n\r\
    \n\x05\x04\x01\x02\0\x04\x12\x04\x0e\x04\r\x18\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03\x0e\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\r\x16\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0e\x19\x1a\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x0f\x04\x14\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x0f\
    \x04\x0e\x1b\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\x04\n\n\x0c\n\
    \x05\x04\x01\x02\x01\x01\x12\x03\x0f\x0b\x0f\n\x0c\n\x05\x04\x01\x02\x01\
    \x03\x12\x03\x0f\x12\x13\n\n\n\x02\x04\x02\x12\x04\x12\0\x15\x01\n\n\n\
    \x03\x04\x02\x01\x12\x03\x12\x08\x17\n\x0b\n\x04\x04\x02\x02\0\x12\x03\
    \x13\x04\x1b\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x13\x04\x12\x19\n\x0c\n\
    \x05\x04\x02\x02\0\x06\x12\x03\x13\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x01\
    \x12\x03\x13\r\x16\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x13\x19\x1a\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03\x14\x04#\n\r\n\x05\x04\x02\x02\x01\
    \x04\x12\x04\x14\x04\x13\x1b\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x14\
    \x04\x10\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x14\x11\x1e\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03\x14!\"\n\n\n\x02\x06\0\x12\x04\x17\0\x19\
    \x01\n\n\n\x03\x06\0\x01\x12\x03\x17\x08\x12\n\x0b\n\x04\x06\0\x02\0\x12\
    \x03\x18\x04<\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x18\x08\x0f\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x18\x10\x1e\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x18)8b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
